// Automatically generated by MockGen. DO NOT EDIT!
// Source: recorder.go

package recorder

import (
	gomock "github.com/golang/mock/gomock"
	v1 "kubevirt.io/api/core/v1"
)

// Mock of MountRecorder interface
type MockMountRecorder struct {
	ctrl     *gomock.Controller
	recorder *_MockMountRecorderRecorder
}

// Recorder for MockMountRecorder (not exported)
type _MockMountRecorderRecorder struct {
	mock *MockMountRecorder
}

func NewMockMountRecorder(ctrl *gomock.Controller) *MockMountRecorder {
	mock := &MockMountRecorder{ctrl: ctrl}
	mock.recorder = &_MockMountRecorderRecorder{mock}
	return mock
}

func (_m *MockMountRecorder) EXPECT() *_MockMountRecorderRecorder {
	return _m.recorder
}

func (_m *MockMountRecorder) SetAddMountRecordContainerDisk(vmi *v1.VirtualMachineInstance, cdRecord []MountTargetEntry, addPreviousRules bool) error {
	ret := _m.ctrl.Call(_m, "SetAddMountRecordContainerDisk", vmi, cdRecord, addPreviousRules)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMountRecorderRecorder) SetAddMountRecordContainerDisk(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetAddMountRecordContainerDisk", arg0, arg1, arg2)
}

func (_m *MockMountRecorder) DeleteContainerDisksMountRecord(vmi *v1.VirtualMachineInstance) error {
	ret := _m.ctrl.Call(_m, "DeleteContainerDisksMountRecord", vmi)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMountRecorderRecorder) DeleteContainerDisksMountRecord(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteContainerDisksMountRecord", arg0)
}

func (_m *MockMountRecorder) GetContainerDisksMountRecord(vmi *v1.VirtualMachineInstance) ([]MountTargetEntry, error) {
	ret := _m.ctrl.Call(_m, "GetContainerDisksMountRecord", vmi)
	ret0, _ := ret[0].([]MountTargetEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMountRecorderRecorder) GetContainerDisksMountRecord(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetContainerDisksMountRecord", arg0)
}

func (_m *MockMountRecorder) SetMountRecordHotpluggedVolumes(vmi *v1.VirtualMachineInstance, hpRecord []MountTargetEntry) error {
	ret := _m.ctrl.Call(_m, "SetMountRecordHotpluggedVolumes", vmi, hpRecord)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMountRecorderRecorder) SetMountRecordHotpluggedVolumes(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetMountRecordHotpluggedVolumes", arg0, arg1)
}

func (_m *MockMountRecorder) GetHotpluggedVolumesMountRecord(vmi *v1.VirtualMachineInstance) ([]MountTargetEntry, error) {
	ret := _m.ctrl.Call(_m, "GetHotpluggedVolumesMountRecord", vmi)
	ret0, _ := ret[0].([]MountTargetEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMountRecorderRecorder) GetHotpluggedVolumesMountRecord(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetHotpluggedVolumesMountRecord", arg0)
}

func (_m *MockMountRecorder) DeleteHotpluggedVolumesMountRecord(vmi *v1.VirtualMachineInstance) error {
	ret := _m.ctrl.Call(_m, "DeleteHotpluggedVolumesMountRecord", vmi)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMountRecorderRecorder) DeleteHotpluggedVolumesMountRecord(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteHotpluggedVolumesMountRecord", arg0)
}
